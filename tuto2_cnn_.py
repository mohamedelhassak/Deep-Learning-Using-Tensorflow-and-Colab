# -*- coding: utf-8 -*-
"""tuto2- CNN .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oknvVnDDx8Ben8XaCtnRPp1UmU7gaxjc
"""

## Import packages
 import matplotlib.pyplot as plt
 import numpy as np

 import tensorflow as tf
 from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Dense, Activation, Flatten
 from tensorflow.keras.layers import Conv2D, MaxPooling2D

 from tensorflow.keras.datasets import cifar10
 from tensorflow.keras.preprocessing.image  import ImageDataGenerator

 #from sklearn.preprocessing import StandardScaler
 #from sklearn.model_selection import train_test_split

## load data
 (X_train ,y_train), (X_test, y_test) = cifar10.load_data()

## display a image
plt.imshow(X_train[5])
print(y_train[5])

## normalized  images
X_train = X_train / 255.0
X_test = X_test / 255.0

plt.imshow(X_train[6])
print(y_train[6])

## build model
model = Sequential()

## craete layers CNN
### add convolutional layer1
model.add(Conv2D(filters=256,kernel_size=(3,3),input_shape=X_train.shape[1:]))
model.add(Activation('relu'))
### add pooling layer1
model.add(MaxPooling2D(pool_size=(2,2)))

### add convolutional layer2
model.add(Conv2D(filters=256,kernel_size=(3,3)))
model.add(Activation('relu'))
### add pooling layer2
model.add(MaxPooling2D(pool_size=(2,2)))

### add flatten layerr
model.add(Flatten())

### add Fully connected layeres
model.add(Dense(64))
model.add(Dense(10))
model.add(Activation('softmax'))

## copile our  model
model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['sparse_categorical_accuracy'])

## summary model
model.summary()

## fit data to model (training)
batch_size = 64
epochs = 100
model.fit(X_train,y_train, batch_size=batch_size,epochs=epochs)

##evaluate  model on test set
test_loss ,test_acc  = model.evaluate(X_test,y_test)

print(f'test loss {test_loss} and test accuracy {test_acc}')